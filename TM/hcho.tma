State Init {
      > Telemetry Start
  +10 > Log Initiating PPS Synchronization
      Validate PPS_synch;
}

State Shutdown {
  +2 > Quit
}

Partition

%{
  double PPS_integral;
  #define GP 1.1e4
  #define GI 1e3
  #define PPS_CLIP_LIMIT 30000
  #define PPS_INT_LIMIT (PPS_CLIP_LIMIT/GI)
  #define PPS_SETPOINT (-47.0)
  /* UpdatePeriod = 5; */
%}

State PPS_idle {}

State PPS_synch nolog {
  { if (PPS_min_drift > PPS_SETPOINT &&
        PPS_min_drift < PPS_SETPOINT+3.000) {
      Validate PPS_rate_synch;
    } else if (PPS_min_drift < PPS_SETPOINT &&
        PPS_min_drift > PPS_SETPOINT-75.0) {
      Validate PPS_synch3;
    }
  }
  +1 > PPS Offset Adjust 30000
  +7 Validate PPS_synch;
}

State PPS_synch3 nolog {
   +1 { double adj;
        if (PPS_min_drift > PPS_SETPOINT) Validate PPS_rate_synch;
        else {
          unsigned short adju;
          adj = (PPS_SETPOINT+2.0-PPS_min_drift)*400;
          if (adj > 30000) adj = 30000;
          adju = adj;
          ci_sendfcmd(0, "PPS Offset Adjust %u\n", adju);
        }
      }
   +7 Validate PPS_synch3;
}

State PPS_rate_synch {
  {
    PPS_integral = PPS_integral + (PPS_min_drift-PPS_SETPOINT);
    if (PPS_integral > PPS_INT_LIMIT) PPS_integral = PPS_INT_LIMIT;
    else if (PPS_integral < -PPS_INT_LIMIT) PPS_integral = -PPS_INT_LIMIT;
  }
  { double rate_adj;
    rate_adj = (PPS_min_drift-PPS_SETPOINT) * GP + PPS_integral * GI;
    if (rate_adj > PPS_CLIP_LIMIT) rate_adj = PPS_CLIP_LIMIT;
    else if (rate_adj < -PPS_CLIP_LIMIT) rate_adj = -PPS_CLIP_LIMIT;
    if (rate_adj != PPS_fine)
      ci_sendfcmd(2, "PPS Rate Adjust %.0lf\n", rate_adj);
  }
}

Partition

%{
  double CellP_integral;
  #define CELLP_GP (-10000/65)
  #define CELLP_GI 20
  #define CELLP_CLIP_LIMIT 10000
  #define CELLP_INT_LIMIT (CELLP_CLIP_LIMIT/GI)
  #define CELLP_SETPOINT (115.0)
  /* UpdatePeriod = 5; */
%}

State CellP_idle {}

State CellP_control {
  { double err_term, rate_adj;
    err_term = (convert(CellP)-CELLP_SETPOINT);
    CellP_integral += err_term;
    if (CellP_integral > CELLP_INT_LIMIT)
      CellP_integral = CELLP_INT_LIMIT;
    else if (CellP_integral < -CELLP_INT_LIMIT)
      CellP_integral = -CELLP_INT_LIMIT;
    rate_adj = 5000 + err_term * CELLP_GP +
      CellP_integral * CELLP_GI;
    if (rate_adj > CELLP_CLIP_LIMIT)
      rate_adj = CELLP_CLIP_LIMIT;
    else if (rate_adj < 0) rate_adj = 0;
    if (rate_adj != FC2_Set)
      ci_sendfcmd(2, "Flow Bypass Set SCCM %.0lf\n", rate_adj);
  }
}
