%{
  #include "nl_assert.h"
  #define BCTR_N_CHANNELS 2
  #define BCTR_BIN_SIZE 105
  #define BCtr_Yes_No_txt(x) ((x)?"Yes":" No")
  #define BCtr_OK_FAIL_txt(x) ((x)?"FAIL":"  OK")

  unsigned short BCtr_sum(BCtr_Cts_t *Cts, int chan, int from, int to) {
    unsigned short sum = 0;
    int i, last = 3+to*BCTR_N_CHANNELS+chan;
    nl_assert(chan < BCTR_N_CHANNELS);
    nl_assert(last < 105);
    nl_assert(from < to);
    // check that chan < BCTR_N_CHANNELS
    // check that 0 <= from <= to < BCTR_NB_TOTAL
    for (i = 3+BCTR_N_CHANNELS*from+chan; i <= last; i+=BCTR_N_CHANNELS)
      sum += Cts[i];
    return sum;
  }
%}
TM typedef unsigned short BCtr_Yes_No { text "%3d" BCtr_Yes_No_txt(); }
TM typedef unsigned short BCtr_OK_FAIL { text "%3d" BCtr_OK_FAIL_txt(); }
TM typedef unsigned short BCtr_NAB_t { text "%1d"; }

BCtr_Cts_t BCtr_Status; Invalidate BCtr_Status;
{ BCtr_Status = BCtr_Bins[0]; Validate BCtr_Status; }
BCtr_Cts_t BCtr_NWords; Invalidate BCtr_NWords;
{ BCtr_NWords = BCtr_Bins[1]; Validate BCtr_NWords; }
BCtr_Cts_t BCtr_NSkip; Invalidate BCtr_NSkip;
{ BCtr_NSkip = BCtr_Bins[2]; Validate BCtr_NSkip; }

BCtr_Yes_No BCtr_Enable; Invalidate BCtr_Enable;
{ BCtr_Enable = (BCtr_Bins[0]>>0)&1; Validate BCtr_Enable; }

BCtr_Yes_No BCtr_DRdy; Invalidate BCtr_DRdy;
{ BCtr_DRdy = (BCtr_Bins[0]>>1)&1; Validate BCtr_DRdy; }

BCtr_Yes_No BCtr_TxActive; Invalidate BCtr_TxActive;
{ BCtr_TxActive = (BCtr_Bins[0]>>2)&1; Validate BCtr_TxActive; }

BCtr_OK_FAIL BCtr_CfgErrOvf; Invalidate BCtr_CfgErrOvf;
{ BCtr_CfgErrOvf = (BCtr_Bins[0]>>3)&1; Validate BCtr_CfgErrOvf; }

BCtr_OK_FAIL BCtr_CfgErrNAB; Invalidate BCtr_CfgErrNAB;
{ BCtr_CfgErrNAB = (BCtr_Bins[0]>>4)&1; Validate BCtr_CfgErrNAB; }

BCtr_Yes_No BCtr_Ready; Invalidate BCtr_Ready;
{ BCtr_Ready = (BCtr_Bins[0]>>5)&1; Validate BCtr_Ready; }

BCtr_OK_FAIL BCtr_TxErrOvf; Invalidate BCtr_TxErrOvf;
{ BCtr_TxErrOvf = (BCtr_Bins[0]>>9)&1; Validate BCtr_TxErrOvf; }

BCtr_NAB_t BCtr_NAB; Invalidate BCtr_NAB;
{ BCtr_NAB = (BCtr_Bins[0]>>6)&7; Validate BCtr_NAB; }

BCtr_Cts_t BCtr_0_a; Invalidate BCtr_0_a;
{ BCtr_0_a = BCtr_sum(BCtr_Bins, 0, 8, 48); Validate BCtr_0_a; }

BCtr_Cts_t BCtr_1_a; Invalidate BCtr_1_a;
{ BCtr_1_a = BCtr_sum(BCtr_Bins, 1, 8, 48); Validate BCtr_1_a; }

