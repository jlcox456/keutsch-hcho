%{
  #include "nl_assert.h"
  #define BCtr_Yes_No_txt(x) ((x)?"Yes":" No")
  #define BCtr_OK_FAIL_txt(x) ((x)?"FAIL":"  OK")

  BCtr_Trigger_t BCtr_sum(BCtr_Cts_t *Cts, int chan, int from, int to) {
    BCtr_Trigger_t sum = 0;
    int i, last = BCTR_DATA_OFFSET + to*BCTR_N_CHANNELS + chan;
    nl_assert(chan < BCTR_N_CHANNELS);
    nl_assert(last < BCTR_BIN_SIZE);
    nl_assert(0 <= from);
    nl_assert(from <= to);
    nl_assert(to < BCTR_NB_TOTAL);
    for (i = BCTR_DATA_OFFSET + from*BCTR_N_CHANNELS + chan;
         i <= last; i += BCTR_N_CHANNELS)
      sum += Cts[i];
    return sum;
  }

  #define short2long(x,y) (x + (((unsigned long)y)<<16))
  
  double BCtr_power(unsigned short lsw, unsigned short msw) {
    signed long pwr32 = (signed long)(
            (((unsigned long)msw) << 16) |
            ((unsigned long)lsw));
    double pwrd = ((double)pwr32) * 1.25 / 1073741824.;
    return pwrd;
  }
%}

BCtr_Cts_t BCtr_Status; Invalidate BCtr_Status;
{ BCtr_Status = BCtr_Bins[1]; Validate BCtr_Status; }

BCtr_Cts_t BCtr_NWords; Invalidate BCtr_NWords;
{ BCtr_NWords = BCtr_Bins[2]; Validate BCtr_NWords; }

BCtr_NAB_t BCtr_IPnum; Invalidate BCtr_IPnum;
{ BCtr_IPnum = BCtr_Bins[3]&0x3F; Validate BCtr_IPnum; }

BCtr_Pfresh_t BCtr_Pfresh; Invalidate BCtr_Pfresh;
{ BCtr_Pfresh = (BCtr_Bins[3]>>9) & 0x1; Validate BCtr_Pfresh; }

LVstat_t BCtr_LVstat; Invalidate BCtr_LVstat;
{ BCtr_LVstat = (BCtr_Bins[3] >> 10) & 0x1F; Validate BCtr_LVstat; }

BCtr_Trigger_t BCtr_NTrigger; Invalidate BCtr_NTrigger;
{ BCtr_NTrigger = short2long(BCtr_Bins[4], BCtr_Bins[5]);
  Validate BCtr_NTrigger; }

HtrDAC_mV_t BCtr_LaserV; Invalidate BCtr_LaserV;
{ BCtr_LaserV = BCtr_Bins[6]; Validate BCtr_LaserV; }

/* LaserPwr_t is defined in TS.tmc */
LaserPwr_t BCtr_LasIn_mW; Invalidate BCtr_LasIn_mW;
{ BCtr_LasIn_mW = BCtr_power(BCtr_Bins[7],BCtr_Bins[8]);
  Validate BCtr_LasIn_mW; }

BCtr_Yes_No BCtr_Enable; Invalidate BCtr_Enable;
{ BCtr_Enable = (BCtr_Bins[1]>>0)&1; Validate BCtr_Enable; }

BCtr_Yes_No BCtr_DRdy; Invalidate BCtr_DRdy;
{ BCtr_DRdy = (BCtr_Bins[1]>>1)&1; Validate BCtr_DRdy; }

BCtr_Yes_No BCtr_TxActive; Invalidate BCtr_TxActive;
{ BCtr_TxActive = (BCtr_Bins[1]>>2)&1; Validate BCtr_TxActive; }

BCtr_OK_FAIL BCtr_CfgErrOvf; Invalidate BCtr_CfgErrOvf;
{ BCtr_CfgErrOvf = (BCtr_Bins[1]>>3)&1; Validate BCtr_CfgErrOvf; }

BCtr_OK_FAIL BCtr_CfgErrNAB; Invalidate BCtr_CfgErrNAB;
{ BCtr_CfgErrNAB = (BCtr_Bins[1]>>4)&1; Validate BCtr_CfgErrNAB; }

BCtr_Yes_No BCtr_Ready; Invalidate BCtr_Ready;
{ BCtr_Ready = (BCtr_Bins[1]>>5)&1; Validate BCtr_Ready; }

BCtr_OK_FAIL BCtr_TxErrOvf; Invalidate BCtr_TxErrOvf;
{ BCtr_TxErrOvf = (BCtr_Bins[1]>>9)&1; Validate BCtr_TxErrOvf; }

BCtr_OK_FAIL BCtr_Expired; Invalidate BCtr_Expired;
{ BCtr_Expired = (BCtr_Bins[1]>>10)&1; Validate BCtr_Expired; }

BCtr_NAB_t BCtr_NAB; Invalidate BCtr_NAB;
{ BCtr_NAB = (BCtr_Bins[1]>>6)&7; Validate BCtr_NAB; }

BCtr_Trigger_t BCtr_0_a; Invalidate BCtr_0_a;
{ BCtr_0_a = BCtr_sum(BCtr_Bins, 0, @from@, @to@); Validate BCtr_0_a; }

BCtr_Trigger_t BCtr_1_a; Invalidate BCtr_1_a;
{ BCtr_1_a = BCtr_sum(BCtr_Bins, 1, @from@, @to@); Validate BCtr_1_a; }
